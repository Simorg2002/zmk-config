/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        HRML: HRML {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <18 35 39 40 41 30 31 32 33 34 22 23 11 10 9 8 7 19 21 20 6>;
            flavor = "balanced";
        };

        HRMR: HRMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        LayerStickyKey: LayerStickyKey {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERSTICKYKEY";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        CapsCapsWord: CapsCapsWord {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPSCAPSWORD";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CLCK>;
        };

        commaMORPH: commaMORPH {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAMORPH";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dotMORPH: dotMORPH {
            compatible = "zmk,behavior-mod-morph";
            label = "DOTMORPH";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        markMORPH: markMORPH {
            compatible = "zmk,behavior-mod-morph";
            label = "MARKMORPH";
            bindings = <&kp QUESTION>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        backsapce {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        prenthesisL {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        parenthesisR {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        SbracketL {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        bracketR {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <33 32>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <9 8>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 4>;
            layers = <0 1>;
            require-prior-idle-ms = <150>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <14 15>;
            layers = <0 1>;
            require-prior-idle-ms = <150>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <15 16>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <26 27>;
            layers = <0 1>;
            require-prior-idle-ms = <150>;
        };

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <27 28>;
            layers = <0 1>;
            require-prior-idle-ms = <150>;
        };

        less {
            bindings = <&kp LESS_THAN>;
            key-positions = <31 32>;
            require-prior-idle-ms = <150>;
            layers = <1>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <32 33>;
            require-prior-idle-ms = <150>;
            layers = <1>;
        };

        braceL {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <19 20>;
            require-prior-idle-ms = <150>;
            layers = <1>;
        };

        braceR {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <21 20>;
            require-prior-idle-ms = <150>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q             &kp W             &kp F               &kp P          &kp B            &kp J        &kp L                          &kp U                &kp Y              &kp SQT            &none
&none  &HRML LEFT_GUI A  &HRML LEFT_ALT R  &HRML LEFT_SHIFT S  &HRML LCTRL T  &kp G            &kp M        &HRMR RCTRL N                  &HRMR RIGHT_SHIFT E  &HRMR RIGHT_ALT I  &HRMR RIGHT_GUI O  &none
&none  &kp Z             &kp X             &kp C               &kp D          &kp V            &kp K        &kp H                          &commaMORPH          &dotMORPH          &markMORPH         &none
                                           &lt 1 ESC           &lt 2 SPACE    &kp BACKSPACE    &lt 0 ENTER  &LayerStickyKey 3 RIGHT_SHIFT  &mo 4
            >;
        };

        Num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp F12  &kp F7  &kp F8  &kp F9  &none    &none         &kp NUMBER_7     &kp N8        &kp N9        &none  &none
&none  &kp F11  &kp F4  &kp F5  &kp F6  &none    &none         &kp NUMBER_4     &kp NUMBER_5  &kp NUMBER_6  &none  &none
&none  &kp F10  &kp F1  &kp F2  &kp F3  &none    &kp NUMBER_0  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &none  &none
                        &none   &none   &none    &kp RET       &sk RIGHT_SHIFT  &kp SPACE
            >;
        };

        Nav {
            bindings = <
&none  &none     &none     &none      &none      &none    &none  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT    &kp INS    &none
&none  &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &none    &none  &kp LEFT        &kp DOWN          &kp UP_ARROW  &kp RIGHT  &none
&none  &none     &none     &none      &none      &none    &none  &kp HOME        &kp PAGE_DOWN     &kp PAGE_UP   &kp END    &none
                           &none      &none      &none    &none  &none           &none
            >;
        };

        Sym {
            bindings = <
&none  &none  &kp HASH     &kp AMPERSAND   &kp GRAVE  &kp TILDE       &none  &none  &none  &none  &none  &none
&none  &none  &kp PIPE     &kp CARET       &kp PLUS   &kp ASTERISK    &none  &none  &none  &none  &none  &none
&none  &none  &kp PERCENT  &kp UNDERSCORE  &kp MINUS  &kp SLASH       &none  &none  &none  &none  &none  &none
                           &kp BACKSLASH   &kp EQUAL  &kp AT          &none  &none  &none
            >;
        };

        controls {
            bindings = <
&trans  &trans  &bt BT_CLR_ALL   &ext_power EP_TOG  &trans           &trans             &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI    &rgb_ug RGB_TOG  &rgb_ug RGB_EFF    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &bt BT_SEL 0     &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3       &trans  &trans  &trans  &trans  &trans  &trans
                                 &trans             &trans           &trans             &trans  &trans  &trans
            >;
        };
    };
};
